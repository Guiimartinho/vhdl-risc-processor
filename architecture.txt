VRISC (VHDL-RISC) ARCHITECTURE SPECIFICATION
VRISC ARCHITECTURE (C) COPYRIGHT 2016 JAY VALENTINE, RELEASED UNDER THE MIT LICENSE

OVERVIEW

The VRISC architecture is a 32-bit, little-endian Harvard architecture.
It uses a fixed-length, 32-bit instruction format, with six addressing modes:

3-Register Addressing
|opcode - 6|rd - 5|rs1 - 5|rs2 - 5|unused - 11	|

Immediate Addressing
|opcode - 6|rd - 5|rs1 - 5|constant - 16	|

Offset Branch Addressing
|opcode - 6|offset - 26				|

Offset Memory Addressing
|opcode - 6|rsd - 5|ro - 5|addr - 16		|

Absolute Block Addressing
|opcode - 6|block addr - 26			|

Register Block Addressing
|opcode - 6|ra - 5|unused - 21			|

The VRISC architecture uses block instruction and memory addressing. 
The operating instruction and memory block addresses can be set using SETI and SETM instructions, respectively. 
All branch, load and store instructions are then relative to this operating block address.
This helps to reduce memory conflicts and increases program portability.

REGISTERS

The VRISC architecture has 32 registers, 31 of which are usable as general purpose registers. 
r0 is hardcoded as having a value of 0, and cannot be written to.

INSTRUCTIONS

The instruction set is composed of 35 instructions, split into three categories - Arithmetic and Logic, Memory Access, and Control.
Below each instruction is given, with mnemonic, syntax, RTL description and functional description.

ARITHMETIC AND LOGIC - 19 INSTRUCTIONS

ADDR	- rd, rs1, rs2 		- rd <= rs1 + rs2				Add the contents of rs1 and rs2 together, storing the result in rd
ADDC	- rd, rs1, cons		- rd <= rs1 + cons				Add constant to the contents of rs1, storing the result in rd
ADDRC	- rd, rs1, rs2		- rd <= rs1 + rs2 + overflow			Add the contents of rs1 and rs2 together, along with carry bit from the previous operation, storing the result in rd
ADDCC	- rd, rs1, cons		- rd <= rs1 + cons + overflow			Add constant to the contents of rs1, along with carry bit from the previous operation, storing the result in rd

SUBR	- rd, rs1, rs2		- rd <= rs1 - rs2				Subtract the contents of rs2 from rs1, storing the result in rd
SUBC	- rd, rs1, cons		- rd <= rs1 - cons				Subtract constant from contents of rs1, storing the result in rd
SUBRB	- rd, rs1, rs2		- rd <= rs1 - rs2 - overflow 			Subtract the contents of rs2 from rs1, along with borrow bit from the previous operation, storing the result in rd
SUBCB	- rd, rs1, cons		- rd <= rs1 - cons - overflow			Subtract constant from contents of rs1, along with borrow bit from the previous operation, storing the result in rd

ANDR	- rd, rs1, rs2		- rd <= rs1 AND rs2				AND the contents of rs1 and rs2, storing the result in rd
ANDC	- rd, rs1, cons		- rd <= rs1 AND cons				AND constant with the contents of rs1, storing the result in rd
ORR	- rd, rs1, rs2		- rd <= rs1 OR rs2				OR the contents of rs1 and rs2, storing the result in rd
ORC	- rd, rs1, cons		- rd <= rs1 OR cons				OR constant with the contents of rs1, storing the result in rd
XORR	- rd, rs1, rs2		- rd <= rs1 XOR rs2				XOR the contents of rs1 and rs2, storing the result in rd
XORC	- rd, rs1, cons		- rd <= rs1 XOR cons				XOR constant with the contents of rs1, storing the result in rd	
NOT	- rd, rs1		- rd <= NOT rs1					NOT the contents of rs1, storing the result in rd

ZERO	- rs1			- test <= 1 if rs1=0, 0 otherwise		Update test flag with 1 if the value of rs1 is equal to zero 
GRT	- rs1, rs2		- test <= 1 if rs1>rs2, 0 otherwise		Update test flag with 1 if the value of rs1 is greater than rs2
LESS	- rs1, rs2		- test <= 1 if rs1<rs2, 0 otherwise		Update test flag with 1 if the value of rs1 is less than rs2
EQU	- rs1, rs2		- test <= 1 if rs1=rs2, 0 otherwise		Update test flag with 1 if the value of rs1 is equal to rs2


MEMORY ACCESS - 8 INSTRUCTIONS

SETMR	- ra			- block <= ra					Set the current operating memory block address to the value of ra
SETMC	- addr			- block <= addr					Set the current operating memory block address to addr

LDB	- rd, addr, ro		- rd <= memory_byte[block + addr + ro]		Load byte at location addr + ro in memory into rd
LDHW	- rd, addr, ro		- rd <= memory_hword[block + addr + ro]		Load half-word at location addr + ro in memory into rd
LDW	- rd, addr, ro		- rd <= memory_word[block + addr + ro]		Load word at location addr + ro in memory into rd

STB	- rs, addr, r0		- memory_byte[block + addr + ro] <= rs		Store byte in rs at location addr + ro in memory
STHW	- rs, addr, r0		- memory_hword[block + addr + ro] <= rs		Store half-word in rs at location addr + ro in memory
STW	- rs, addr, r0		- memory_word[block + addr + ro] <= rs		Store word in rs at location addr + ro in memory

CONTROL - 8 INSTRUCTIONS

SETIR	- ra			- pc <= ra					Set pc to the value of ra
SETIC	- addr			- pc <= addr					Set pc to addr

BRA	- offset		- pc <= pc + offset				Branch to instruction at location pc + offset
BRAT	- offset		- pc <= pc + offset if test=1, pc otherwise	Branch to instruction at location pc + offset if test flag is 1

CALL	- offset		- stack[top] <= pc + 4, pc <= pc + offset	Branch to subroutine at location pc + offset, placing the return address onto the stack
CALLR	- ra			- stack[top] <= pc + 4, pc <= ra		Branch to subroutine at location given by the value of ra, placing the return address onto the stack
CALLB	- addr			- stack[top] <= pc + 4, pc <= block		Branch to subroutine at location addr, placing the return address onto the stack
RET	-			- pc <= stack[top]				Return to address on the top of the stack

