RISC INSTRUCTION SET
(C) COPYRIGHT 2016 JAY VALENTINE, RELEASED UNDER THE MIT LICENSE
29 INSTRUCTIONS OUT OF POSSIBlE 64

ARITHMETIC AND LOGIC - 19 INSTRUCTIONS

ADDR	- rd, rs1, rs2 	- rd <= rs1 + rs2
ADDC	- rd, rs1, cons	- rd <= rs1 + cons
ADDRC	- rd, rs1, rs2	- rd <= rs1 + rs2 + overflow
ADDCC	- rd, rs1, cons	- rd <= rs1 + cons + overflow

SUBR	- rd, rs1, rs2	- rd <= rs1 - rs2
SUBC	- rd, rs1, cons	- rd <= rs1 - cons
SUBRB	- rd, rs1, rs2	- rd <= rs1 - rs2 - overflow 
SUBCB	- rd, rs1, cons	- rd <= rs1 - cons - overflow

ANDR	- rd, rs1, rs2	- rd <= rs1 AND rs2
ANDC	- rd, rs1, cons	- rd <= rs1 AND cons
ORR	- rd, rs1, rs2	- rd <= rs1 OR rs2
ORC	- rd, rs1, cons	- rd <= rs1 OR cons
XORR	- rd, rs1, rs2	- rd <= rs1 XOR rs2
XORC	- rd, rs1, cons	- rd <= rs1 OR cons
NOT	- rd, rs1	- rd <= NOT rs1

ZERO	- rs1		- test <= 1 if s1=0, 0 otherwise
GRT	- rs1, rs2	- test <= 1 if rs1>rs2, 0 otherwise
LESS	- rs1, rs2	- test <= 1 if rs1<rs2, 0 otherwise
EQU	- rs1, rs2	- test <= 1 if rs1=rs2, 0 otherwise


MEMORY ACCESS - 6 INSTRUCTIONS

LDB	- rd, addr, ro	- rd <= memory_byte[addr + ro]
LDHW	- rd, addr, ro	- rd <= memory_hword[addr + ro]
LDW	- rd, addr, ro	- rd <= memory_word[addr + ro]

STB	- rs, addr, r0	- memory_byte[addr + ro] <= rs
STHW	- rs, addr, r0	- memory_hword[addr + ro] <= rs
STW	- rs, addr, r0	- memory_word[addr + ro] <= rs

CONTROL - 4 INSTRUCTIONS

BR	- offset	- pc <= pc + offset
BRT	- offset	- pc <= pc + offset if test=1, pc otherwise

CALL	- offset	- stack[top] <= pc + 4, pc <= pc + offset
RET	-		- pc <= stack[top]

